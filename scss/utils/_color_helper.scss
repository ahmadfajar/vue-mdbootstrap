@use 'sass:color';
@use 'sass:math';
@use 'sass:string';

@function round($value, $fractionDigits: 0) {
  $power: math.pow(10, $fractionDigits);
  @return math.div(math.round($power * $value), $power);
}

@function to-rgb($color, $fractionDigits: 1) {
  $red: round(color.channel($color, 'red'), $fractionDigits);
  $green: round(color.channel($color, 'green'), $fractionDigits);
  $blue: round(color.channel($color, 'blue'), $fractionDigits);

  @return rgb($red, $green, $blue);
}

@function to-rgba($color, $fractionDigits: 1) {
  $red: round(color.channel($color, 'red'), $fractionDigits);
  $green: round(color.channel($color, 'green'), $fractionDigits);
  $blue: round(color.channel($color, 'blue'), $fractionDigits);
  $alpha: round(color.channel($color, 'alpha'), $fractionDigits);

  @return rgba($red, $green, $blue, $alpha);
}

@function to-oklch($color, $fractionDigits: 2) {
  $lightness: round(color.channel($color, 'lightness', $space: oklch), $fractionDigits);
  $chroma: round(color.channel($color, 'chroma', $space: oklch), $fractionDigits);
  $hue: round(color.channel($color, 'hue', $space: oklch), $fractionDigits);
  $alpha: round(color.channel($color, 'alpha', $space: oklch), max($fractionDigits, 3));

  @return oklch($lightness $chroma $hue / #{$alpha});
}

@function to-hex($color) {
  $ie-hex: color.ie-hex-str($color);
  $c1: string.slice($ie-hex, 2, 3);

  @if string.length($ie-hex) == 9 and $c1 == 'FF' {
    @return string.unquote('##{string.slice($ie-hex, 4)}');
  } @else {
    $c2: string.slice($ie-hex, 4);
    @return string.unquote('##{$c2}#{$c1}');
  }
}

// Returns range from 0 to 255
@function brightness($color) {
  $red: color.channel($color, 'red') * 299;
  $green: color.channel($color, 'green') * 587;
  $blue: color.channel($color, 'blue') * 114;

  @return math.div(($red + $green + $blue), 1000);
}

// Returns range from 0% to 100%
@function lightnessLevel($color) {
  @return color.channel($color, 'lightness', $space: oklch);
}

@function set-color-contrast($bgColor, $textOnLightBg, $textOnDarkBg, $lightness: 75%) {
  @if (lightnessLevel($bgColor) > $lightness) {
    @return $textOnLightBg;
  } @else {
    @return $textOnDarkBg;
  }
}

$white: #fff;
$black: #000;
$default-active-bgcolor: to-oklch(#5f4a97);

// Returns color in oklch color space
@function set-alt-bgcolor($color, $transparency: 0, $brightness: 170) {
  @if (brightness($color) > 254) {
    @if ($transparency > 0) {
      @return to-oklch(color.change($default-active-bgcolor, $alpha: $transparency));
    } @else {
      @return to-oklch($white);
    }
  } @else if (brightness($color) > $brightness) {
    @if ($transparency > 0) {
      @return color.change(
        to-oklch(color.adjust($color, $lightness: -35%)),
        $alpha: ($transparency + 0.1)
      );
    } @else {
      @return color.change(to-oklch(color.adjust($color, $lightness: -25%)), $alpha: 0.2);
    }
  } @else {
    @if ($transparency > 0) {
      @return color.change(
        to-oklch(color.adjust($color, $lightness: 30%)),
        $alpha: ($transparency + 0.1)
      );
    } @else {
      @return color.change(to-oklch(color.adjust($color, $lightness: 25%)), $alpha: 0.2);
    }
  }
}

// Tint a color with black/white and returns color in oklch color space
//
// $lightness is negative it will tint with black and the color result becomes darker
// $lightness is positive it will tint with white and the color result becomes lighter
@function shift-color($color, $lightness: 10%) {
  $weight: math.abs($lightness);
  $tint-color: if($lightness > 0, $white, $black);

  @return to-oklch(color.mix($tint-color, $color, $weight, oklch));
}
