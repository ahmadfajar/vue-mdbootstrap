@use "sass:color";

// Create background colors classes
@each $color_name, $color in $mdb-colors-1 {
    @each $color_type, $color_value in $color {
        @if $color_type == "base" {
            @if(map-get($theme-colors, $color_name) == null) {
                .bg-#{$color_name} {
                    background-color: $color_value !important;
                }
            }

            .bg-rgba-#{$color_name}-slight,
            .bg-rgba-#{$color_name}-slight:after {
                background-color: rgba($color_value, .1) !important;
            }
            .bg-rgba-#{$color_name}-light,
            .bg-rgba-#{$color_name}-light:after {
                background-color: rgba($color_value, .3) !important;
            }
            .bg-rgba-#{$color_name}-strong,
            .bg-rgba-#{$color_name}-strong:after {
                background-color: rgba(color.adjust($color_value, $lightness: -5%), .7) !important;
            }
        } @else {
            @if $enable_full_palette {
                .bg-#{$color_name}.#{$color_type} {
                    background-color: $color_value !important;
                }
            }
        }
    }
}

// Create grey variants for background, borders and text colors
@each $color_name, $color in $grays {
    .bg-grey-#{$color_name} {
        background-color: $color !important;
    }

    .border-grey-#{$color_name} {
        border-color: $color !important;
    }

    .text-grey-#{$color_name} {
        color: $color !important;
    }

    a.text-grey-#{$color_name} {
        &:hover, &:focus {
            color: color.adjust($color, $lightness: -15%) !important;
        }
    }
}

// Create theme variants for backgrounds, borders and text colors
$removed-duplicate-colors: map-remove($merge-theme-colors,
        "light", "black", "white", "dark", "elegant-color-dark",
        "dark-blue", "primary-color-dark"
);
$removed-bs-colors: map-remove($removed-duplicate-colors,
        "primary", "secondary", "success", "info", "warning", "danger", "white"
);

:root {
    --#{$bs-prefix}bg-opacity: 1;
    --#{$bs-prefix}border-opacity: 1;
    --#{$bs-prefix}text-opacity: 1;
}

@each $color_name, $color in $removed-bs-colors {
    .bg-#{$color_name} {
        background-color: rgba($color, var(--#{$bs-prefix}bg-opacity)) !important;
    }

    .border-#{$color_name} {
        border-color: rgba($color, var(--#{$bs-prefix}border-opacity)) !important;
    }

    .text-#{$color_name} {
        color: rgba($color, var(--#{$bs-prefix}text-opacity)) !important;
    }

    a.text-#{$color_name} {
        &:hover, &:focus {
            color: color.adjust($color, $lightness: -15%) !important;
        }
    }
}

// Manually adds duplicate theme-color
.bg-dark, .bg-elegant-color-dark {
    background-color: rgba($elegant-color-dark, var(--#{$bs-prefix}bg-opacity)) !important;
}

.bg-dark-blue, .bg-primary-color-dark {
    background-color: rgba($primary-color-dark, var(--#{$bs-prefix}bg-opacity)) !important;
}

.border-dark, .border-elegant-color-dark {
    border-color: rgba($elegant-color-dark, var(--#{$bs-prefix}border-opacity)) !important;
}

.border-dark-blue, .border-primary-color-dark {
    border-color: rgba($primary-color-dark, var(--#{$bs-prefix}border-opacity)) !important;
}

.text-dark, .text-elegant-color-dark {
    color: rgba($elegant-color-dark, var(--#{$bs-prefix}text-opacity)) !important;
}

.text-dark-blue, .text-primary-color-dark {
    color: rgba($primary-color-dark, var(--#{$bs-prefix}text-opacity)) !important;
}

a.text-dark, a.text-elegant-color-dark {
    &:hover, &:focus {
        color: color.adjust($elegant-color-dark, $lightness: -15%) !important;
    }
}

a.text-dark-blue, a.text-primary-color-dark {
    &:hover, &:focus {
        color: color.adjust($primary-color-dark, $lightness: -15%) !important;
    }
}
