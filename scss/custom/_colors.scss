@use 'sass:color';
@use 'sass:map';
@use '../mixins/css3/text-decorators' as decorators;
@use '../utils/color_helper' as helper;
@use '../color_vars' as colors;
@use '../variables' as vars;

// Create custom colors for background, borders and text
//--------------------------------------------------------
$final-colors: map.remove(
  colors.$merge-theme-colors,
  'dark',
  'elegant-color-dark',
  'dark-blue',
  'primary-color-dark',
  'default',
  'primary',
  'secondary',
  'info',
  'success',
  'warning',
  'danger',
  'grey',
  'light-grey',
  'light',
  'dark',
  'black',
  'white'
);

@each $name, $color in $final-colors {
  @include decorators.decorate-color($color, $name);
}

// Manually adds duplicate custom colors
//---------------------------------------
@include decorators.decorate-color(colors.$primary-color-dark, 'dark-blue', 'primary-color-dark');

// Create full color palette for background
//-------------------------------------------
@each $name, $colors in colors.$full-palette {
  @each $sub_name, $color_value in $colors {
    @if $sub_name == 'base' {
      @if (map.get(colors.$theme-colors, $name) == null) {
        .bg-#{$name} {
          background-color: $color_value !important;
        }
      }

      .bg-rgba-#{$name}-slight,
      .bg-rgba-#{$name}-slight:after {
        background-color: rgba($color_value, 0.1) !important;
      }

      .bg-rgba-#{$name}-light,
      .bg-rgba-#{$name}-light:after {
        background-color: rgba($color_value, 0.3) !important;
      }

      .bg-rgba-#{$name}-strong,
      .bg-rgba-#{$name}-strong:after {
        background-color: rgba(
          helper.to-rgb(color.adjust($color_value, $lightness: -5%)),
          0.7
        ) !important;
      }
    } @else {
      @if colors.$enable_full_palette {
        @include decorators.decorate-color(
          $color_value,
          '#{$name}.#{$sub_name}',
          false,
          true,
          false,
          false,
          false
        );
      }
    }
  }
}
