@use "sass:color";
@use "sass:map";
@use "../utils/color_helper" as helper;
@use "../color_vars" as colors;
@use "../variables" as vars;

// Create custom colors for background, borders and text
//--------------------------------------------------------
$final-colors: map.remove(colors.$merge-theme-colors,
    "dark", "elegant-color-dark",
    "dark-blue", "primary-color-dark",
    "default", "primary", "secondary",
    "info", "success", "warning", "danger",
    "grey", "light-grey", "light", "dark",
    "black", "white"
);

@each $name, $color in $final-colors {
    .bg-#{$name} {
        background-color: rgba($color, var(--#{vars.$prefix-bs}bg-opacity)) !important;
    }

    .border-#{$name} {
        border-color: rgba($color, var(--#{vars.$prefix-bs}border-opacity)) !important;
    }

    .text-#{$name} {
        color: rgba($color, var(--#{vars.$prefix-bs}text-opacity)) !important;
    }

    a.text-#{$name} {
        &:hover, &:focus {
            color: helper.round-color-rgb(color.adjust($color, $lightness: -15%)) !important;
        }
    }
}

// Manually adds duplicate custom colors
//---------------------------------------
.bg-dark-blue, .bg-primary-color-dark {
    background-color: rgba(colors.$primary-color-dark, var(--#{vars.$prefix-bs}bg-opacity)) !important;
}

.border-dark-blue, .border-primary-color-dark {
    border-color: rgba(colors.$primary-color-dark, var(--#{vars.$prefix-bs}border-opacity)) !important;
}

.text-dark-blue, .text-primary-color-dark {
    color: rgba(colors.$primary-color-dark, var(--#{vars.$prefix-bs}text-opacity)) !important;
}

a.text-dark-blue, a.text-primary-color-dark {
    &:hover, &:focus {
        color: helper.round-color-rgb(color.adjust(colors.$primary-color-dark, $lightness: -15%)) !important;
    }
}

// Create full color palette for background
//-------------------------------------------
@each $name, $colors in colors.$full-palette {
    @each $sub_name, $color_value in $colors {
        @if $sub_name == "base" {
            @if(map.get(colors.$theme-colors, $name) == null) {
                .bg-#{$name} {
                    background-color: $color_value !important;
                }
            }

            .bg-rgba-#{$name}-slight,
            .bg-rgba-#{$name}-slight:after {
                background-color: rgba($color_value, .1) !important;
            }

            .bg-rgba-#{$name}-light,
            .bg-rgba-#{$name}-light:after {
                background-color: rgba($color_value, .3) !important;
            }

            .bg-rgba-#{$name}-strong,
            .bg-rgba-#{$name}-strong:after {
                background-color: rgba(helper.round-color-rgb(color.adjust($color_value, $lightness: -5%)), .7) !important;
            }
        } @else {
            @if colors.$enable_full_palette {
                .bg-#{$name}.#{$sub_name} {
                    background-color: $color_value !important;
                }
            }
        }
    }
}
