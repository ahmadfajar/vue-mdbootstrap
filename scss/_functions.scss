@use "sass:color";
@use "sass:map";
@use "sass:math";

// Colors function
@function theme-color-level($theme, $color-name: "primary", $level: 0) {
    $color: map.get($theme, $color-name);
    $color-base: if($level > 0, $black, $white);
    $level: math.abs($level);

    @return color.mix($color-base, $color, $level * $theme-color-interval);
}

@function set-color-contrast($bgColor, $textOnLightBg, $textOnDarkBg, $brightnessLevel: 165) {
    @if (brightness($bgColor) > $brightnessLevel) {
        @return $textOnLightBg;
    } @else {
        @return $textOnDarkBg;
    }
}

@function set-alt-bgcolor($color, $transparency: 0, $brightnessLevel: 170) {
    @if (brightness($color) > 254) {
        @if ($transparency > 0) {
            @return rgba($default-active-bgcolor, $transparency);
        } @else {
            @return $white;
        }
    } @else if (brightness($color) > $brightnessLevel) {
        @if ($transparency > 0) {
            @return rgba(color.adjust($color, $lightness: -35%), $transparency + 0.1);
        } @else {
            @return rgba(color.adjust($color, $lightness: -25%), .2);
        }
    } @else {
        @if ($transparency > 0) {
            @return rgba(color.adjust($color, $lightness: 30%), $transparency + 0.1);
        } @else {
            @return rgba(color.adjust($color, $lightness: 25%), .2);
        }
    }
}

@function brightness($color) {
    $red: color.channel($color, "red") * 299;
    $green: color.channel($color, "green") * 587;
    $blue: color.channel($color, "blue") * 114;

    @return math.div(($red + $green + $blue), 1000);
}

@function to-rgb($color) {
    @return color.channel($color, "red"), color.channel($color, "green"), color.channel($color, "blue");
}
